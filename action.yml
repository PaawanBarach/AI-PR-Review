name: AI PR Review
description: RAG-powered code review with LLM augmentation
branding:
  icon: search
  color: blue

inputs:
  llm_tier:
    description: LLM tier alias (fast|balanced|quality)
    required: false
    default: balanced
  top_k:
    description: Retrieval neighbors
    required: false
    default: "6"
  max_tokens:
    description: Max tokens for LLM
    required: false
    default: "512"
  confidence_threshold:
    description: Minimum confidence for posting
    required: false
    default: "0.75"
  enable_check_runs:
    description: Create GitHub Check Runs
    required: false
    default: "true"
  enable_sarif:
    description: Generate SARIF
    required: false
    default: "true"

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: pip

    - name: Cache FAISS store
      uses: actions/cache@v4
      with:
        path: .rag/faiss
        key: faiss-${{ github.repository }}-${{ hashFiles('requirements.txt') }}-${{ github.sha }}
        restore-keys: |
          faiss-${{ github.repository }}-

    - name: Install
      shell: bash
      run: |
        pip install -r $GITHUB_ACTION_PATH/requirements.txt

    - name: Prepare inputs
      id: prep
      shell: bash
      run: |
        git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > pr_diff.txt
        git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt || true

    - name: Run review
      shell: bash
      env:
        PYTHONPATH: ${{ github.action_path }}
        GITHUB_TOKEN: ${{ github.token }}
        HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        LLM_TIER: ${{ inputs.llm_tier }}
        TOP_K: ${{ inputs.top_k }}
        MAX_TOKENS: ${{ inputs.max_tokens }}
        CONFIDENCE_THRESHOLD: ${{ inputs.confidence_threshold }}
        ENABLE_CHECK_RUNS: ${{ inputs.enable_check_runs }}
        ENABLE_SARIF: ${{ inputs.enable_sarif }}
      run: |
        python - <<'PY'
        import asyncio, os, json
        from api import Service, ReviewRequest
        repo = os.environ.get("GITHUB_REPOSITORY","")
        with open("pr_diff.txt","r",encoding="utf-8",errors="ignore") as f: diff = f.read()
        changed = []
        if os.path.exists("changed_files.txt"):
          with open("changed_files.txt","r") as f: changed = [l.strip() for l in f if l.strip()]
        req = ReviewRequest(repository={"full_name": repo}, pull_request={"number": int(os.environ.get("PR_NUMBER","0") or 0), "title": os.environ.get("PR_TITLE",""), "body": os.environ.get("PR_BODY",""), "changed_files": changed}, diff_content=diff)
        async def main():
          svc = Service()
          resp = await svc.run(req)
          print(json.dumps(resp.model_dump(), indent=2))
        asyncio.run(main())
        PY

    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ai-review-artifacts
        path: |
          review_metrics.jsonl
          results.sarif
          pr_diff.txt
          changed_files.txt
        retention-days: 30
